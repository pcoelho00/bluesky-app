"""
Data models for the Bluesky Feed Summarizer database.
"""

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, field_validator
from pydantic import ConfigDict


class Post(BaseModel):
    """Represents a Bluesky post stored in the database."""

    model_config = ConfigDict()  # placeholder for future options; default behavior OK

    id: Optional[int] = None
    uri: str = Field(..., description="Unique post URI")
    cid: str = Field(..., description="Content identifier")
    author_handle: str = Field(..., description="Author's Bluesky handle")
    author_did: str = Field(..., description="Author's decentralized identifier")
    text: str = Field(..., description="Post content text")
    created_at: datetime = Field(..., description="When the post was created")
    like_count: int = Field(default=0, ge=0, description="Number of likes")
    repost_count: int = Field(default=0, ge=0, description="Number of reposts")
    reply_count: int = Field(default=0, ge=0, description="Number of replies")
    indexed_at: datetime = Field(..., description="When the post was indexed")

    @field_validator("created_at", "indexed_at", mode="before")
    @classmethod
    def parse_datetime(cls, v):
        if isinstance(v, str):
            return datetime.fromisoformat(v.replace("Z", "+00:00"))
        return v


class Summary(BaseModel):
    """Represents a summary generated by Claude AI."""

    model_config = ConfigDict()

    id: Optional[int] = None
    start_date: datetime = Field(..., description="Start date of the summarized period")
    end_date: datetime = Field(..., description="End date of the summarized period")
    post_count: int = Field(..., ge=0, description="Number of posts summarized")
    summary_text: str = Field(..., description="Generated summary text")
    model_used: str = Field(..., description="AI model used for summarization")
    created_at: datetime = Field(..., description="When the summary was created")

    @field_validator("start_date", "end_date", "created_at", mode="before")
    @classmethod
    def parse_datetime(cls, v):
        if isinstance(v, str):
            return datetime.fromisoformat(v.replace("Z", "+00:00"))
        return v
